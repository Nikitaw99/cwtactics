{"src_const/stub.js":{"code":"/** the global object which is shared between every module. */\r\ncwt = {};\r\n","lastModified":1455991613939},"src_const/base.js":{"code":"INACTIVE_ID = -1;\r\nDESELECT_ID = -2;\r\n\r\nACTIONS_BUFFER_SIZE = 200;\r\n\r\nMAX_PLAYERS = 4;\r\nMAX_UNITS = 50;\r\nMAX_MAP_WIDTH = 100;\r\nMAX_MAP_HEIGHT = 100;\r\nMAX_PROPERTIES = 300;\r\nMAX_SELECTION_RANGE = 15;\r\nMAX_BUFFER_SIZE = 200;\r\nTILE_LENGTH = 16;\r\n\r\nVERSION = \"0.3.6\";\r\nAI_VERSION = \"DumbBoy v. 0.1 Alpha\";","lastModified":1456566780638},"src_const/dev.js":{"code":"DEBUG = true;\r\nMOD_PATH = \"http://localhost/src_gamedata/\";\r\n","lastModified":1455991613923},"src_new/core/commands.js":{"code":"var commandPool = {\r\n  pushData: function pushData(msg) {\r\n    this.buffer.push(msg);\r\n  },\r\n\r\n  evaluateData: function evaluateData() {\r\n    if (this.buffer.length > 0) {\r\n      this.handler(this.buffer.shift());\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n};\r\n\r\ncwt.produceDataBuffer = function(dataHandler) {\r\n  return Object.assign(Object.create(commandPool), {\r\n    buffer: [],\r\n    handler: dataHandler\r\n  });\r\n};","lastModified":1463228586723},"src_new/core/events.js":{"code":"var eventHandler = {\r\n\r\n  _getHandler: function _getHandler(key) {\r\n    if (!this.handlers) this.handlers = {};\r\n    if (!this.handlers.hasOwnProperty(key)) this.handlers[key] = [];\r\n    return this.handlers[key];\r\n  },\r\n\r\n  publish: function publish(key, p1, p2, p3, p4, p5) {\r\n    if (!key) {\r\n      cwt.raiseError(\"IllgalEvent\");\r\n    }\r\n    this._getHandler(key).forEach(function(handler) {\n      return handler(p1, p2, p3, p4, p5);\n    });\r\n    this._getHandler(\"*\").forEach(function(handler) {\n      return handler(key, p1, p2, p3, p4, p5);\n    });\r\n  },\r\n\r\n  subscribe: function subscribe(key, handler) {\r\n    this._getHandler(key).push(handler);\r\n  }\r\n};\r\n\r\ncwt.produceEventHandler = function() {\r\n  return Object.create(eventHandler);\r\n};","lastModified":1463228192476},"src_new/core/hash.js":{"code":"cwt.createHash = function(str) {\r\n  var hash = 0;\r\n\r\n  if (value.length === 0) {\r\n    return hash;\r\n  }\r\n\r\n  for (var i = 0; i < value.length; i += 1) {\r\n    var c = value.charCodeAt(i);\r\n    hash = ((hash << 5) - hash) + c;\r\n    hash = hash & hash;\r\n  }\r\n\r\n  return hash;\r\n};","lastModified":1463124918963},"src_new/core/jobs.js":{"code":"var serialExecutor = function(jobList, cbDone, cbFail) {\r\n  var jobs = jobList.slice(0);\r\n\r\n  function executionIterator(index) {\r\n    try {\r\n      jobs[index](function() {\r\n        setTimeout(index + 1 === jobs.length ? cbDone : function() {\n          return executionIterator(index + 1);\n        }, 10);\r\n      }, cbFail);\r\n    } catch (err) {\r\n      cbFail(err);\r\n    }\r\n  }\r\n\r\n  executionIterator(0);\r\n};\r\n\r\ncwt.executeJobs = serialExecutor;","lastModified":1463124732619},"src_new/core/logging.js":{"code":"var consoleLog = {\r\n\r\n  LEVEL: {\r\n    INFO: [\" FINE\", \"color: green;\"],\r\n    WARN: [\" WARN\", \"color: orange;\"],\r\n    ERROR: [\"ERROR\", \"color: red;\"]\r\n  },\r\n\r\n  _message: function _message(level, msg) {\r\n    return \"%c[\" + this.LEVEL[level][0] + \"][\" + this.loggerName + \"] \" + msg;\r\n  },\r\n\r\n  _style: function _style(level) {\r\n    return this.LEVEL[level][1];\r\n  },\r\n\r\n  info: function info(msg) {\r\n    console.log(this._message(\"INFO\", msg), this._style(\"INFO\"));\r\n  },\r\n\r\n  warn: function warn(msg) {\r\n    console.log(this._message(\"WARN\", msg), this._style(\"WARN\"));\r\n  },\r\n\r\n  error: function($__error) {\n    var $__wrapper = function error() {\n      return $__error.apply(this, arguments);\n    };\n\n    $__wrapper.toString = function() {\n      return $__error.toString();\n    };\n\n    return $__wrapper;\n  }(function(error) {\n    var msg = (arguments[1] !== void 0 ? arguments[1] : \"Unexpected error\");\n    console.log(this._message(\"ERROR\", msg), this._style(\"ERROR\"));\n    console.error(error);\n  })\r\n};\r\n\r\nvar nullLog = {\r\n  info: function info() {},\r\n  warn: function warn() {},\r\n  error: function error() {}\r\n};\r\n\r\nvar loggerContext = \"\";\r\n\r\ncwt.produceLoggerContext = function() {\n  var name = (arguments[0] !== void 0 ? arguments[0] : \"\");\n  loggerContext = (\"     \" + name).slice(-5) + \"][\";\n};\r\n\r\ncwt.clearLoggerContext = function() {\r\n  loggerContext = \"\";\r\n};\r\n\r\n/**\r\n  @return {\r\n    \r\n    info(string) \r\n      logs an info message\r\n    \r\n    warn(string)\r\n      logs a warning message\r\n    \r\n    error(string, Error)\r\n      logs an error\r\n  }\r\n*/\r\ncwt.produceLogger = function() {\n  var name = (arguments[0] !== void 0 ? arguments[0] : \"CWT\");\n  return Object.assign(Object.create(consoleLog), {\r\n    loggerName: loggerContext + ((\"                    \" + name).slice(-20))\r\n  });\n};","lastModified":1463229536543},"src_new/core/request.js":{"code":"var genericRequest = function(path, cbDone, cbFail) {\r\n  var request = new XMLHttpRequest();\r\n  request.onreadystatechange = function() {\r\n    if (request.readyState == 4) {\r\n      if (request.status == 200) {\r\n        cbDone(request.responseText);\r\n      } else {\r\n        cbFail(request.statusText);\r\n      }\r\n    }\r\n  };\r\n  request.open(\"get\", path + (path.indexOf(\"?\") < 0 ? \"?\" : \"&\") + (parseInt(Math.random() * 100000, 10)), true);\r\n  request.send();\r\n};\r\n\r\nvar jsonRequest = function(path, cbDone, cbFail) {\r\n  genericRequest(path, function(data) {\r\n    try {\r\n      cbDone(JSON.parse(data));\r\n    } catch (error) {\r\n      cbFail(\"JSONException: \" + error);\r\n    }\r\n  }, cbFail);\r\n};\r\n\r\nvar fileMapping = {\r\n  \".json\": jsonRequest\r\n};\r\n\r\ncwt.requestResource = function(path, cbDone, cbFail) {\r\n  var fileSuffix = path.substring(path.lastIndexOf(\".\"));\r\n\r\n  if (!fileMapping[fileSuffix]) {\r\n    throw new Error(\"UnsupportedMediaType: \" + path);\r\n  }\r\n\r\n  fileMapping[fileSuffix](path, cbDone, cbFail);\r\n};\r\n","lastModified":1463174511223},"src_new/core/sheets.js":{"code":"var sheetDB = {\r\n\r\n  getRandomSheet: function getRandomSheet() {\r\n    return this.sheets[this.names[parseInt(Math.random() * this.names.length, 10)]];\r\n  },\r\n\r\n  getSheet: function getSheet(id) {\r\n    return this.requireNonNull(this.sheets[id]);\r\n  }\r\n};\r\n\r\ncwt.produceSheetDB = function(sheets, validator) {\r\n  var sheetsMap = {};\r\n  sheets.forEach(function(value) {\n    return sheetsMap[value.id] = value;\n  });\r\n\r\n  return Object.assign(Object.create(sheetDB), {\r\n    sheets: sheetsMap,\r\n    names: Object.keys(sheetsMap),\r\n    requireNonNull: cwt.produceTypeAsserter().isSomething\r\n  });\r\n};","lastModified":1463177459311},"src_new/core/statemachine.js":{"code":"var stateMachine = {\r\n  setState: function setState(id) {\r\n    this.activeState.exit();\r\n    this.activeState = this.states[id];\r\n    this.activeState.enter();\r\n    this.logger.info(\"entered state \" + id);\r\n    this.events.publish(\"state:entered:\" + id);\r\n  }\r\n};\r\n\r\ncwt.produceStateMachine = function(eventHandler, states) {\r\n  return Object.assign(Object.create(stateMachine), {\r\n    states: states,\r\n    events: eventHandler,\r\n    logger: cwt.produceLogger(\"STATEMACHINE\"),\r\n    activeState: states[Object.keys(states)[0]]\r\n  });\r\n};","lastModified":1463177703281},"src_new/core/timer.js":{"code":"var timeoutable = {\r\n  tick: function tick(time) {\r\n    this.timeLeft -= time;\r\n    if (this.timeLeft <= 0) {\r\n      this.timeLeft = this.timeout;\r\n      this.handler();\r\n    }\r\n  }\r\n};\r\n\r\ncwt.produceTimer = function(timeout, handler) {\r\n  return Object.assign(Object.create(timeoutable), {\r\n    handler: handler,\r\n    timeout: timeout,\r\n    timeLeft: timeout\r\n  });\r\n};","lastModified":1462952171950},"src_new/core/types.js":{"code":"var typeCheck = {\r\n\r\n  isInteger: function isInteger(value) {\r\n    return typeof value === 'number' && value % 1 === 0;\r\n  },\r\n\r\n  isNumber: function isNumber(value) {\r\n    return typeof value === 'number';\r\n  },\r\n\r\n  isString: function isString(value) {\r\n    return typeof value === 'string';\r\n  },\r\n\r\n  isFunction: function isFunction(value) {\r\n    return typeof value === 'function';\r\n  },\r\n\r\n  isBoolean: function isBoolean(value) {\r\n    return value === true || value === false;\r\n  },\r\n\r\n  isSomething: function isSomething(value) {\r\n    return value !== null && value !== undefined;\r\n  },\r\n\r\n  isListOf: function isListOf(value, valueTypeCheck) {\r\n    return value.every(function(element) {\n      return valueTypeCheck(element);\n    });\r\n  },\r\n\r\n  isMapOf: function isMapOf(value, valueTypeCheck) {\r\n    return Object.keys(value).every(function(key) {\n      return valueTypeCheck(value[key]);\n    });\r\n  }\r\n};\r\n\r\nvar typeAssert = (function() {\r\n  var buildRequirer = function(fn) {\r\n    return function(value) {\r\n      if (!fn.apply(null, arguments)) throw new Error('TypeAssertionFailed');\r\n      return value;\r\n    };\r\n  };\r\n\r\n  var checker = typeCheck;\r\n  Object.keys(typeCheck).forEach(function(key) {\n    return checker[key] = buildRequirer(typeCheck[key]);\n  });\r\n\r\n  return checker;\r\n}());\r\n\r\n// @return { is[Integer|Number|String|Something|Function|Boolean](value): boolean } \r\ncwt.produceTypeChecker = function() {\r\n  return typeCheck;\r\n};\r\n\r\n// @return { is[Integer|Number|String|Something|Function|Boolean](value): boolean } \r\ncwt.getTypeCheckAPI = function() {\r\n  return typeCheck;\r\n};\r\n\r\n// @return { is[Integer|Number|String|Something|Function|Boolean](value): value } \r\ncwt.produceTypeAsserter = function() {\r\n  return typeAssert;\r\n};","lastModified":1463215922935},"src_new/core/utility.js":{"code":"cwt.partialApplyLeft = function(fn) {\r\n  var slice = Array.prototype.slice;\r\n  var args = slice.call(arguments, 1);\r\n\r\n  return fn.bind.apply(fn, [null].concat(args));\r\n};\r\n\r\ncwt.partialApplyRight = function(fn) {\r\n  var slice = Array.prototype.slice;\r\n  var args = slice.call(arguments, 1);\r\n\r\n  return function() {\r\n    return fn.apply(this, slice.call(arguments, 0).concat(args));\r\n  };\r\n};\r\n\r\ncwt.nTimes = function(n, fn) {\r\n  let i = 1;\r\n  while (i <= n) {\r\n    fn(i);\r\n    i++;\r\n  }\r\n};\r\n\r\ncwt.raiseError = function(error) {\r\n  throw new Error(error);\r\n};\r\n\r\ncwt.mustReturn = function(fn, expectedValue) {\r\n  return function() {\r\n    var returnValue = fn.apply(null, arguments);\r\n    if (returnValue !== expectedValue) {\r\n      cwt.raiseError(\"UnexpectedFunctionReturn\");\r\n    }\r\n    return returnValue;\r\n  }\r\n};\r\n\r\nvar optionalValue = {\r\n\r\n  _valueExists: function _valueExists() {\r\n    return this.value !== null && this.value !== undefined;\r\n  },\r\n\r\n  ifPresent: function ifPresent(cb) {\r\n    if (this._valueExists()) {\r\n      cb(this.value);\r\n    }\r\n  },\r\n\r\n  orElse: function orElse(fallback) {\r\n    return this._valueExists() ? this.value : fallback;\r\n  }\r\n};\r\n\r\ncwt.optional = function(value) {\r\n  return Object.assign(Object.create(optionalValue), {\r\n    value: value\r\n  });\r\n};\r\n\r\ncwt.stringWithLimitedLength = function(value, length) {\n  var appendix = (arguments[2] !== void 0 ? arguments[2] : \"...\");\n  if (value.length > length) {\r\n    value = value.substring(0, length) + appendix;\r\n  }\n  return value;\n};","lastModified":1463228804640},"src_new/model/model.js":{"code":"var modelHandler = {\r\n\r\n};\r\n\r\ncwt.produceModel = function(events) {\r\n  let turn = cwt.produceTurn(events, \"players\");\r\n\r\n  return Object.assign(Object.create(modelHandler), {\r\n    turn: turn\r\n  });\r\n};  ","lastModified":1463172344704},"src_new/model/movetypes.js":{"code":"var movetypeValidator = function(sheet) {\r\n\r\n};\r\n\r\ncwt.getMovetypeValidator = function() {\r\n  return movetypeValidator;\r\n};","lastModified":1462954915762},"src_new/model/tiles.js":{"code":"const mapChanger = {\r\n\r\n  setSize: function setSize(width, height) {\r\n    this.model.width = this.types.isInteger(width);\r\n    this.model.height = this.types.isInteger(height);\r\n    if (!(width > 0 && height > 0)) cwt.raiseError(\"IllegalMapSize\");\r\n  },\r\n\r\n  setTile: function setTile(x, y, type) {\r\n    this.map[x][y] = this.typeDB.getSheet(type);\r\n    this.events.sendMessage(\"map:tile:set\", x, y, type);\r\n  }, \r\n\r\n  fillWithType: function fillWithType(type) {\r\n    for (var x = 0; x < this.model.width; x += 1) {\r\n      for (var y = 0; y < this.model.height; y += 1) { \r\n        this.setTile(x, y, type);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst tiletypeNormalizer = function(types, sheet) {\r\n  types.isInteger(data.defense);\r\n\r\n  /*\r\n  sheet.blocksVision = !!data.blocksVision;\r\n  sheet.capturePoints = Types.isInteger(data.capturePoints) ? data.capturePoints : -1;\r\n  sheet.looseAfterCaptured = !!data.looseAfterCaptured;\r\n  sheet.changeAfterCaptured = !!data.changeAfterCaptured;\r\n  sheet.notTransferable = !!data.notTransferable;\r\n  sheet.funds = Types.isInteger(data.funds) ? data.funds : 0;\r\n  sheet.vision = Types.isInteger(data.vision) ? data.vision : 0;\r\n  */\r\n  sheet.supply = cwt.optional(sheet.supply).orElse([]);\r\n  sheet.repairs = cwt.optional(sheet.repairs).orElse([]);\r\n};\r\n\r\ncwt.produceMapData = function() {\r\n  return {\r\n    map: (function() {\r\n      var map = [];\r\n      cwt.nTimes(MAX_MAP_WIDTH, function() {\n        return map.push([]);\n      });\r\n      return map;\r\n    }()),\r\n    width: 0,\r\n    height: 0\r\n  };\r\n};\r\n\r\ncwt.produceMapChanger = function(map, events, typeDB) {\r\n  Object.assign(Object.create(mapChanger), {\r\n    map: map,\r\n    typeDB: typeDB,\r\n    events: events,\r\n    types: cwt.produceTypeAsserter()\r\n  });\r\n};\r\n\r\ncwt.produceTiletypeNormalizer = function() {\r\n  return cwt.partialApplyLeft(tiletypeNormalizer, cwt.produceTypeAsserter());\r\n};","lastModified":1463219417877},"src_new/model/turn.js":{"code":"var turnHandler = {\r\n\r\n  setDay: function setDay(day) {\r\n    this.day = day;\r\n    this.events.publish(\"turn:day\", day);\r\n  },\r\n\r\n  setTurnOwner: function setTurnOwner(id) {\r\n    this.turnOwner = id;\r\n    this.events.publish(\"turn:owner\", id);\r\n  },\r\n\r\n  pickNextTurnOwner: function pickNextTurnOwner() {\r\n    let currentOwnerId = this.turnOwner;\r\n    let nextOwnerId = currentOwnerId;\r\n    do {\r\n\r\n      nextOwnerId++;\r\n      if (nextOwnerId === this.players.getNeutralPlayerId()) {\r\n        nextOwnerId = 0;\r\n        this.setDay(this.day + 1);\r\n      }\r\n\r\n      if (this.players.isPlayerActive(nextOwnerId)) {\r\n        this.setTurnOwner(nextOwnerId);\r\n      }\r\n\r\n    } while (currentOwnerId != nextOwnerId);\r\n\r\n    cwt.raiseError(\"unable to pick a new turn owner\");\r\n  }\r\n};\r\n\r\ncwt.produceTurn = function(events, players) {\r\n  let types = cwt.produceTypeAsserter();\r\n\r\n  let turn = Object.assign(Object.create(turnHandler), {\r\n    events: events,\r\n    players: players\r\n  });\r\n\r\n  turn.setDay(0);\r\n  turn.setTurnOwner(0);\r\n\r\n  return turn;\r\n};","lastModified":1463130933097},"src_new/model/weather.js":{"code":"const weathertypeValidator = function(sheet) {\r\n  sheet.defaultWeather = Types.isBoolean(data.defaultWeather) ? data.defaultWeather : false;\r\n  sheet.minDuration = Require.isInteger(data.minDuration, data.id + \":minDuration\");\r\n  sheet.maxDuration = Require.isInteger(data.maxDuration, data.id + \":maxDuration\");\r\n};\r\n\r\nconst weather = {\r\n\r\n  setWeather: function setWeather(id) {\r\n    this.active = this.types.getSheet(id);\r\n    let duration = this.active.minDuration;\r\n    duration += parseInt(Math.random() * (this.active.maxDuration - duration), 10);\r\n    this.leftDays = duration;\r\n    this.events.publish(\"weather:changed:\" + id, duration);\r\n  },\r\n\r\n  decreaseLeftDays: function decreaseLeftDays() {\r\n    this.leftDays--;\r\n    if (this.leftDays == 0) {\r\n      this.setWeather(this.types.getRandom().id);\r\n    }\r\n  }\r\n};\r\n\r\ncwt.getWeathertypeValidator = function() {\r\n  return weathertypeValidator;\r\n};\r\n\r\ncwt.produceWeather = function(events) {\r\n  var weather = Object.assign(Object.create(weather), {\r\n    events: events\r\n  });\r\n\r\n  events.subscribe(\"turn:day\", function() {\n    return weather.decreaseLeftDays();\n  });\r\n\r\n  return weather;\r\n};","lastModified":1463171134353},"src_new/controller/states/loading_state.js":{"code":"var TOOLTIP_TIMEOUT = 5000;\r\n\r\nvar loadingState = {\r\n\r\n  _initTips: function _initTips() {\r\n    this.tips = [];\r\n    this.events.subscribe(\"game:loadtype:TIPS\", function(data) {\n      return this.tips = data;\n    }.bind(this));\r\n    this.tipTimer = this.generateTimer(TOOLTIP_TIMEOUT, function() {\n      return this.log.info(\"TIP: \" + this.tips[parseInt(Math.random() * this.tips.length, 10)]);\n    }.bind(this));\r\n  },\r\n\r\n  enter: function enter() {\r\n    this.doneLoading = false;\r\n\r\n    var createDataHandler = function(type, path) {\r\n      return function(cbDone, cbFail) {\r\n        this.requestData(path, function(data) {\r\n          this.log.info(\"grabbed data from path \" + path);\r\n          this.events.publish(\"game:loadtype:\" + type, data);\r\n          cbDone();\r\n        }.bind(this), cbFail);\r\n      }.bind(this);\r\n    }.bind(this);\r\n\r\n    this._initTips();\r\n\r\n    this.serial([\r\n        createDataHandler(\"TIPS\", \"../src_gamedata/tips.json\"),\r\n        createDataHandler(\"TILES\", \"../src_gamedata/tiles.json\"),\r\n        createDataHandler(\"UNITS\", \"../src_gamedata/units.json\"),\r\n        createDataHandler(\"MOVETYPES\", \"../src_gamedata/movetypes.json\"),\r\n        createDataHandler(\"WEATHERS\", \"../src_gamedata/weathers.json\")\r\n      ],\r\n      function() {\n        return this.doneLoading = true;\n      }.bind(this),\r\n      function(error) {\n        return this.log.error(error);\n      }.bind(this)\r\n    );\r\n  },\r\n\r\n  update: function update(delta, input) {\r\n    this.tipTimer.tick(delta);\r\n    if (this.doneLoading && input.isActionPressed(\"ACTION\")) {\r\n      this.log.info(\"completed data loading\");\r\n      return \"MAINMENU\";\r\n    }\r\n    return;\r\n  },\r\n\r\n  render: function render(delta) {\r\n\r\n  }\r\n};","lastModified":1463229656533},"src_new/controller/states/load_map.js":{"code":"var loadMapState = {\r\n\r\n  enter: function enter() {\r\n    cwt.client_event_load_map({\r\n      name: \"development fake map\",\r\n      height: 15,\r\n      width: 15,\r\n      day: 10,\r\n      fill_type: \"PLIN\",\r\n      players: [{\r\n        team: 3,\r\n        name: \"Willy Wonker\"\r\n      }, {\r\n        team: 1\r\n      }],\r\n      units: [{\r\n        type: \"INFT\",\r\n        x: 2,\r\n        y: 2,\r\n        owner: 0\r\n      }, {\r\n        type: \"INFT\",\r\n        x: 3,\r\n        y: 4,\r\n        owner: 0\r\n      }, {\r\n        type: \"INFT\",\r\n        x: 3,\r\n        y: 3,\r\n        owner: 1\r\n      }]\r\n    });\r\n  }\r\n};","lastModified":1462904182902},"src_new/controller/states/main_menu.js":{"code":"var mainMenuState = {\r\n  update: function update(delta, input) {\r\n    if (input.isActionPressed(\"ACTION\")) {\r\n      return \"LOADMAP\";\r\n    }\r\n    return null;\r\n  }\r\n};","lastModified":1463178278195},"src_new/controller/states/start_game.js":{"code":"var startGameState = {\r\n\r\n\tupdate: function update() {\r\n\t\tthis.log.info(\"starting game\");\r\n\t\treturn \"LOADING\";\r\n\t},\r\n\r\n\trender: function render(\n        // TODO render the loading status here\n        delta) // TODO render the loading status here\n    {\r\n\t\t// TODO render the loading status here\r\n\t}\r\n};","lastModified":1463173359354},"src_new/controller/input/keyboard.js":{"code":"var keyboardInput = {\r\n  bind: function bind() {\r\n    document.onkeydown = function(event) {\r\n      this.keyHandler.pressKey(\"KB_\" + event.keyCode);\r\n      return false;\r\n    }.bind(this);\r\n\r\n    document.onkeyup = function(event) {\r\n      this.keyHandler.releaseKey(\"KB_\" + event.keyCode);\r\n      return false;\r\n    }.bind(this);\r\n  },\r\n\r\n  unbind: function unbind() {\r\n    document.onkeydown = null;\r\n    document.onkeyup = null;\r\n  }\r\n};\r\n\r\n// TODO use html event handler\r\n\r\ncwt.produceKeyboardBackend = function(keyHandler) {\r\n  return Object.assign(Object.create(keyboardInput), {\r\n    keyHandler: keyHandler\r\n  });\r\n};","lastModified":1463178990139},"src_new/controller/i18n.js":{"code":"var localization = Object.freeze({\r\n  resolve: function resolve(key) {\r\n    var data = this.languages[this.activeLanguage][key];\r\n    return this.types.isSomething(data) ? data : \"???\" + key + \"???\";\r\n  },\r\n  \r\n  selectLanguage: function selectLanguage(key) {\r\n    this.requires.isSomething(this.languages[key]);\r\n    this.activeLanguage = key;\r\n  }\r\n}); \r\n\r\ncwt.produceLocalizationProvider = function(languages) {\r\n  if (!tc.isMapOf(languages, partialRight(tc.isMapOf, tc.isString) )) {\r\n    cwt.raiseError(\"IAE\");\r\n  }\r\n  \r\n  // languages: this.require(languages).toBe(mapOf(mapOf(string()))\r\n  \r\n  return Object.assign(Object.create(localization), {\r\n    languages: languages,\r\n    activeLanguage: Object.keys(languages)[0],\r\n    types: cwt.produceTypeChecker(),\r\n    requires: cwt.produceTypeAsserter()\r\n  });\r\n};","lastModified":1463162914716},"src_new/controller/input.js":{"code":"var inputActionHandler = {\r\n\r\n  _getActionList: function _getActionList(action) {\r\n    if (!this.actions.hasOwnProperty(action)) {\r\n      this.actions[action] = [];\r\n    }\r\n    return this.actions[action];\r\n  },\r\n\r\n  isActionPressed: function isActionPressed(action) {\r\n    return this._getActionList(action).some(function(key) {\n      return this.keys[key];\n    }.bind(this));\r\n  },\r\n\r\n  demapKeyFromAction: function demapKeyFromAction(key, action) {\r\n    var keyList = this._getActionList(action);\r\n    var index = keyList.indexOf(key);\r\n    keyList.splice(index, 1);\r\n  },\r\n\r\n  mapKeyToAction: function mapKeyToAction(key, action) {\r\n    this._getActionList(action).push(key);\r\n  }\r\n};\r\n\r\nvar fakeInputActionHandler = {\r\n  isActionPressed: function isActionPressed(action) {\r\n    return false;\r\n  },\r\n\r\n  demapKeyFromAction: function demapKeyFromAction(key, action) {\r\n  },\r\n\r\n  mapKeyToAction: function mapKeyToAction(key, action) {\r\n  }\r\n};\r\n\r\nvar inputKeyHandler = {\r\n\r\n  pressKey: function pressKey(key) {\r\n    this.keys[key] = true;\r\n  },\r\n\r\n  releaseKey: function releaseKey(key) {\r\n    this.keys[key] = false;\r\n  }\r\n};\r\n\r\ncwt.produceFakeInputHandler = function() {\r\n  return fakeInputActionHandler;\r\n};\r\n\r\ncwt.produceInputHandler = function() {\r\n  var keys = {};\r\n\r\n  var actions = Object.assign(Object.create(inputActionHandler), {\r\n    actions: {},\r\n    keys: keys\r\n  });\r\n\r\n  var keys = Object.assign(Object.create(inputKeyHandler), {\r\n    keys: keys\r\n  });\r\n\r\n  actions.mapKeyToAction(\"KB_13\", \"ACTION\");\r\n\r\n  cwt.produceKeyboardBackend(keys).bind();\r\n\r\n  return actions;\r\n};","lastModified":1463179362488},"src_new/controller/loop.js":{"code":"var gameloop = Object.freeze({\r\n\r\n  start: function start() {\r\n    var handleLoop = function() {\r\n      var now;\r\n      if (this._lastTime === -1) {\r\n        return;\r\n      }\r\n      now = Date.now();\r\n      this.loopAction(now - this._lastTime);\r\n      this._lastTime = now;\r\n      requestAnimationFrame(handleLoop);\r\n    }.bind(this);\r\n    this._lastTime = Date.now();\r\n    requestAnimationFrame(handleLoop);\r\n  },\r\n\r\n  stop: function stop() {\r\n    this._lastTime = -1;\r\n  }\r\n});\r\n\r\ncwt.produceGameloop = function(handler) {\r\n  return Object.assign(Object.create(gameloop), {\r\n    loopAction: handler\r\n  });\r\n};","lastModified":1462935200009},"src_new/controller/states.js":{"code":"var state = {\r\n  enter: function enter() {},\r\n  update: function update() {},\r\n  render: function render() {},\r\n  exit: function exit() {}\r\n};\r\n\r\ncwt.produceGamestates = function(events) {\r\n  function produceState(stateImpl, name) {\n    var dependencies = (arguments[2] !== void 0 ? arguments[2] : {});\n    return Object.assign(Object.assign(Object.create(state), stateImpl), Object.assign({\r\n      log: cwt.produceLogger(name)\r\n    }, dependencies));\n  }\r\n\r\n  return {\r\n    STARTGAME: produceState(startGameState, \"STARTGAME\"),\r\n    LOADING: produceState(loadingState, \"LOADING\", {\r\n      requestData: cwt.requestResource,\r\n      generateTimer: cwt.produceTimer,\r\n      serial: cwt.executeJobs,\r\n      events: events\r\n    }),\r\n    MAINMENU: produceState(mainMenuState, \"MAINMENU\"),\r\n    LOADMAP: produceState(loadMapState, \"LOADMAP\")\r\n  };\r\n};","lastModified":1463176465399},"src_new/controller/storage.js":{"code":"var localForageAPI = {\r\n\r\n  getItem: function(key, cbDone, cbFail) {\r\n    localforage.getItem(key, function(err, value) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone(value);\r\n      }\r\n    });\r\n  },\r\n\r\n  setItem: function(key, value, cbDone, cbFail) {\r\n    localforage.setItem(key, value, function(err, value) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone();\r\n      }\r\n    });\r\n  },\r\n\r\n  removeItem: function(key, cbDone, cbFail) {\r\n    localforage.removeItem(key, function(err) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone();\r\n      }\r\n    });\r\n  },\r\n\r\n  clear: function(cbDone, cbFail) {\r\n    localforage.clear(function(err) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\ncwt.producePersistentStorage = function() {\r\n  return Object.create(localForageAPI);\r\n};","lastModified":1463125279767},"src_new/events/fake_handler.js":{"code":"cwt.client_intialize_workers = function() {};","lastModified":1459533109290},"src_new/main.js":{"code":"cwt.produceGameInstance = function(loop) {\r\n\r\n  const assertNonNull = cwt.produceTypeAsserter().isSomething;\r\n  const realInput = cwt.produceInputHandler();\r\n  const fakeInput = cwt.produceFakeInputHandler();\r\n  const eventHandler = cwt.produceEventHandler();\r\n  const states = cwt.produceGamestates(eventHandler);\r\n  const statemachine = cwt.produceStateMachine(eventHandler, states);\r\n\r\n  var unitTypeDB;\r\n  var tileTypeDB;\r\n  var moveTypeDB;\r\n  var weatherTypeDB;\r\n\r\n  eventHandler.subscribe(\"loading:type:UNITS\", function(data) {\n    return unitTypeDB = cwt.produceSheetDB(data, function() {\n      return true;\n    });\n  });\r\n  eventHandler.subscribe(\"loading:type:TILES\", function(data) {\n    return tileTypeDB = cwt.produceSheetDB(data, cwt.produceTiletypeNormalizer());\n  });\r\n  eventHandler.subscribe(\"loading:type:MOVETYPES\", function(data) {\n    return moveTypeDB = cwt.produceSheetDB(data, function() {\n      return true;\n    });\n  });\r\n  eventHandler.subscribe(\"loading:type:WEATHERS\", function(data) {\n    return weatherTypeDB = cwt.produceSheetDB(data, function() {\n      return true;\n    });\n  });\r\n \r\n  eventHandler.subscribe(\"state:entered:MAINMENU\", function() {\r\n\r\n    assertNonNull(unitTypeDB);\r\n    assertNonNull(tileTypeDB);\r\n    assertNonNull(moveTypeDB);\r\n    assertNonNull(weatherTypeDB);\r\n\r\n    // ??? ==> OPTIONAL\r\n    const typeDB = cwt.produceTypeDB(unitTypeDB, tileTypeDB, moveTypeDB, weatherTypeDB);\r\n    const model = cwt.produceModel(eventHandler);\r\n    //         OPTIONAL <== ???\r\n\r\n    const turn = cwt.produceTurn(eventHandler, null /* players */ );\r\n    const units = cwt.produceUnitData();\r\n    const unitFactory = cwt.produceUnitFactory(units);\r\n    const unitHandler = cwt.produceUnitHandler(eventHandler, units);\r\n    const map = cwt.produceMapData();\r\n    const mapChanger = cwt.produceMapChanger(map, eventHandler, tileTypeDB);\r\n    const playerData = cwt.producePlayerData();\r\n    const playerChanger = cwt.producePlayerChanger(playerData);\r\n\r\n    const mapLoader = cwt.produceMapLoader(eventHandler, unitFactory, mapChanger, playerChanger, turn);\r\n\r\n    eventHandler.subscribe(\"client:map:load\", function(data) {\n      return mapLoader.loadMap(data);\n    });\r\n\r\n\r\n    cwt.__DEVMODEL__ = {\r\n      turn: turn,\r\n      units: units,\r\n      map: map,\r\n      playerData: playerData\r\n    };\r\n  });\r\n\r\n  var blockInputTimer = 0;\r\n  return cwt.produceGameloop(function(delta) {\r\n    blockInputTimer -= delta;\r\n\r\n    var nextState = statemachine.activeState.update(delta, blockInputTimer <= 0 ? realInput : fakeInput);\r\n    statemachine.activeState.render(delta);\r\n    cwt.optional(nextState).ifPresent(function(next) { \r\n      blockInputTimer = 250;\r\n      statemachine.setState(next);\r\n    });\r\n  });\r\n};\r\n\r\ncwt.startGame = function() {\r\n  cwt.produceGameInstance().start();\r\n};","lastModified":1463221286121},"src_new/model/types.js":{"code":"cwt.produceTypeDB = function(units, tiles, movetypes, weathers) {\r\n  return {\r\n    units: units, \r\n    tiles: tiles,\r\n    movetypes: movetypes,\r\n    weathers: weathers\r\n  };\r\n};","lastModified":1463178076116},"src_new/model/units.js":{"code":"var unit = {\r\n  type: null\r\n};\r\n\r\nvar unitHandler = {\r\n\r\n};\r\n\r\nvar unitFactory = {\r\n  cleanUnits: function cleanUnits() {\r\n    this.units.forEach(function(unit) {\n      return unit.type = null;\n    });\r\n  },\r\n\r\n  createUnit: function createUnit(type, x, y) {\r\n    this.units.find(function(unit) {\n      return !unit.type;\n    }).type = type;\r\n  }\r\n}\r\n\r\ncwt.produceUnitData = function() {\r\n  var list = [];\r\n  cwt.nTimes(50, function() {\n    return list.push(Object.create(unit));\n  });\r\n  return list;\r\n};\r\n\r\ncwt.produceUnitFactory = function(units) {\r\n  return Object.assign(Object.create(unitFactory), {\r\n    units: units\r\n  });\r\n};\r\n\r\ncwt.produceUnitHandler = function(events, units) {\r\n  return Object.assign(Object.create(unitHandler), {\r\n    events: events\r\n  });\r\n};","lastModified":1463219958259},"src_new/model/players.js":{"code":"var player = {\r\n  name: \"\",\r\n  team: -1\r\n};\r\n\r\nvar playerChanger = {\r\n  cleanPlayers: function cleanPlayers() {\r\n    this.model.forEach(function(player) {\n      return player.team = -1;\n    });\r\n  },\r\n\r\n  activatePlayer: function activatePlayer(name, team) {\r\n    var slot = this.types.isSomething(this.model.first(function(player) {\n      return player.team === -1;\n    }));\r\n    slot.team = team;\r\n    slot.name = name;\r\n  }\r\n};\r\n\r\ncwt.producePlayerData = function() {\r\n  var list = [];\r\n  cwt.nTimes(4, function() {\n    return list.push(Object.create(player));\n  });\r\n  return list;\r\n};\r\n\r\ncwt.producePlayerChanger = function(playerData) {\r\n  return Object.assign(Object.create(playerChanger), {\r\n    model: playerData,\r\n    types: cwt.produceTypeAsserter()\r\n  })\r\n};","lastModified":1463219993584},"src_new/modelSerializer/mapLoader.js":{"code":"const mapLoader = {\r\n  loadMap: function loadMap(mapData) {\r\n    \r\n    this.mapChanger.setSize(map.width, map.height);\r\n    this.mapChanger.fillWithTiles(map.fill_type);\r\n\r\n    this.turn.setDay(cwt.optional(map.day).orElse(0));\r\n    this.turn.setTurnOwner(cwt.optional(map.turn_owner).orElse(0));\r\n\r\n    this.playerChanger.cleanPlayers();\r\n    if (this.typeCheck.isInteger(map.players)) {\r\n      cwt.nTimes(map.players, function(index) {\n        return this.playerChanger.activatePlayer(\"Player:\" + index, index);\n      }.bind(this));\r\n    } else {\r\n      map.players.forEach(function(data, index) {\n        return this.playerChanger.activatePlayer(\r\n          cwt.optional(data.name).orElse(\"Player:\" + index),\r\n          cwt.optional(data.team).orElse(index)\r\n        );\n      }.bind(this));\r\n    }\r\n\r\n    this.unitFactory.cleanUnits();\r\n    cwt.optional(map.units).ifPresent(function(units) {\n      return units.forEach(function(data) {\n        return this.units.createUnitAt(data.type, data.x, data.y);\n      }.bind(this));\n    }.bind(this));\r\n  }\r\n};\r\n\r\ncwt.produceMapLoader = function(events, unitFactory, mapChanger, playerChanger, turn) {\r\n  return Object.assign(Object.create(mapLoader), {\r\n    events: events,\r\n    unitFactory: unitFactory,\r\n    turn: turn,\r\n    mapChanger: mapChanger,\r\n    playerChanger: playerChanger,\r\n    types: cwt.produceTypeAsserter(),\r\n    typeCheck: cwt.produceTypeChecker(),\r\n    logger: cwt.produceLogger(\"MAPLOADER\")\r\n  });\r\n};","lastModified":1463219035731},"src_new/core/loop.js":{"code":"var loopHandler = Object.freeze({\r\n\r\n  start: function start() {\r\n    const loop = function() {\r\n      if (this.lastTime === -1) {\r\n        return;\r\n      }\r\n\r\n      var now = Date.now();\r\n      this.loopAction(now - this.lastTime);\r\n      this.lastTime = now;\r\n      this.nextLoop(loop);\r\n    }.bind(this);\r\n\r\n    this.lastTime = Date.now();\r\n    this.nextLoop(loop);\r\n  },\r\n\r\n  stop: function stop() {\r\n    this.lastTime = -1;\r\n  }\r\n});\r\n\r\nvar requestAnimationFrameLoop = function(loop) {\r\n  requestAnimationFrame(loop);\r\n};\r\n\r\nvar setIntervalLoop = function(loop) {\r\n  setTimeout(loop, 50);\r\n};\r\n\r\ncwt.produceGameloop = function(handler) {\r\n  return Object.assign(Object.create(loopHandler), {\r\n    loopAction: handler,\r\n    nextLoop: !!requestAnimationFrame ? requestAnimationFrameLoop : setIntervalLoop\r\n  });\r\n};","lastModified":1463222279313},"src_new/game/model/model.js":{"code":"var modelHandler = {\r\n\r\n};\r\n\r\ncwt.produceModel = function(events) {\r\n  let turn = cwt.produceTurn(events, \"players\");\r\n\r\n  return Object.assign(Object.create(modelHandler), {\r\n    turn: turn\r\n  });\r\n};  ","lastModified":1463172344704},"src_new/game/model/movetypes.js":{"code":"var movetypeValidator = function(sheet) {\r\n\r\n};\r\n\r\ncwt.getMovetypeValidator = function() {\r\n  return movetypeValidator;\r\n};","lastModified":1462954915762},"src_new/game/model/players.js":{"code":"var player = {\r\n  name: \"\",\r\n  team: -1\r\n};\r\n\r\nvar playerChanger = {\r\n  cleanPlayers: function cleanPlayers() {\r\n    this.model.forEach(function(player) {\n      return player.team = -1;\n    });\r\n  },\r\n\r\n  activatePlayer: function activatePlayer(name, team) {\r\n    var slot = this.types.isSomething(this.model.first(function(player) {\n      return player.team === -1;\n    }));\r\n    slot.team = team;\r\n    slot.name = name;\r\n  }\r\n};\r\n\r\ncwt.producePlayerData = function() {\r\n  var list = [];\r\n  cwt.nTimes(4, function() {\n    return list.push(Object.create(player));\n  });\r\n  return list;\r\n};\r\n\r\ncwt.producePlayerChanger = function(playerData) {\r\n  return Object.assign(Object.create(playerChanger), {\r\n    model: playerData,\r\n    types: cwt.produceTypeAsserter()\r\n  })\r\n};","lastModified":1463219993584},"src_new/game/model/tiles.js":{"code":"const mapChanger = {\r\n\r\n  setSize: function setSize(width, height) {\r\n    this.model.width = this.types.isInteger(width);\r\n    this.model.height = this.types.isInteger(height);\r\n    if (!(width > 0 && height > 0)) cwt.raiseError(\"IllegalMapSize\");\r\n  },\r\n\r\n  setTile: function setTile(x, y, type) {\r\n    this.map[x][y] = this.typeDB.getSheet(type);\r\n    this.events.sendMessage(\"map:tile:set\", x, y, type);\r\n  }, \r\n\r\n  fillWithType: function fillWithType(type) {\r\n    for (var x = 0; x < this.model.width; x += 1) {\r\n      for (var y = 0; y < this.model.height; y += 1) { \r\n        this.setTile(x, y, type);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst tiletypeNormalizer = function(types, sheet) {\r\n  types.isInteger(data.defense);\r\n\r\n  /*\r\n  sheet.blocksVision = !!data.blocksVision;\r\n  sheet.capturePoints = Types.isInteger(data.capturePoints) ? data.capturePoints : -1;\r\n  sheet.looseAfterCaptured = !!data.looseAfterCaptured;\r\n  sheet.changeAfterCaptured = !!data.changeAfterCaptured;\r\n  sheet.notTransferable = !!data.notTransferable;\r\n  sheet.funds = Types.isInteger(data.funds) ? data.funds : 0;\r\n  sheet.vision = Types.isInteger(data.vision) ? data.vision : 0;\r\n  */\r\n  sheet.supply = cwt.optional(sheet.supply).orElse([]);\r\n  sheet.repairs = cwt.optional(sheet.repairs).orElse([]);\r\n};\r\n\r\ncwt.produceMapData = function() {\r\n  return {\r\n    map: (function() {\r\n      var map = [];\r\n      cwt.nTimes(MAX_MAP_WIDTH, function() {\n        return map.push([]);\n      });\r\n      return map;\r\n    }()),\r\n    width: 0,\r\n    height: 0\r\n  };\r\n};\r\n\r\ncwt.produceMapChanger = function(map, events, typeDB) {\r\n  Object.assign(Object.create(mapChanger), {\r\n    map: map,\r\n    typeDB: typeDB,\r\n    events: events,\r\n    types: cwt.produceTypeAsserter()\r\n  });\r\n};\r\n\r\ncwt.produceTiletypeNormalizer = function() {\r\n  return cwt.partialApplyLeft(tiletypeNormalizer, cwt.produceTypeAsserter());\r\n};","lastModified":1463219417877},"src_new/game/model/turn.js":{"code":"var turnHandler = {\r\n\r\n  setDay: function setDay(day) {\r\n    this.day = day;\r\n    this.events.publish(\"turn:day\", day);\r\n  },\r\n\r\n  setTurnOwner: function setTurnOwner(id) {\r\n    this.turnOwner = id;\r\n    this.events.publish(\"turn:owner\", id);\r\n  },\r\n\r\n  pickNextTurnOwner: function pickNextTurnOwner() {\r\n    let currentOwnerId = this.turnOwner;\r\n    let nextOwnerId = currentOwnerId;\r\n    do {\r\n\r\n      nextOwnerId++;\r\n      if (nextOwnerId === this.players.getNeutralPlayerId()) {\r\n        nextOwnerId = 0;\r\n        this.setDay(this.day + 1);\r\n      }\r\n\r\n      if (this.players.isPlayerActive(nextOwnerId)) {\r\n        this.setTurnOwner(nextOwnerId);\r\n      }\r\n\r\n    } while (currentOwnerId != nextOwnerId);\r\n\r\n    cwt.raiseError(\"unable to pick a new turn owner\");\r\n  }\r\n};\r\n\r\ncwt.produceTurn = function(events, players) {\r\n  let types = cwt.produceTypeAsserter();\r\n\r\n  let turn = Object.assign(Object.create(turnHandler), {\r\n    events: events,\r\n    players: players\r\n  });\r\n\r\n  turn.setDay(0);\r\n  turn.setTurnOwner(0);\r\n\r\n  return turn;\r\n};","lastModified":1463130933097},"src_new/game/model/types.js":{"code":"cwt.produceTypeDB = function(units, tiles, movetypes, weathers) {\r\n  return {\r\n    units: units, \r\n    tiles: tiles,\r\n    movetypes: movetypes,\r\n    weathers: weathers\r\n  };\r\n};","lastModified":1463178076116},"src_new/game/model/units.js":{"code":"var unit = {\r\n  type: null\r\n};\r\n\r\nvar unitHandler = {\r\n\r\n};\r\n\r\nvar unitFactory = {\r\n  cleanUnits: function cleanUnits() {\r\n    this.units.forEach(function(unit) {\n      return unit.type = null;\n    });\r\n  },\r\n\r\n  createUnit: function createUnit(type, x, y) {\r\n    this.units.find(function(unit) {\n      return !unit.type;\n    }).type = type;\r\n  }\r\n}\r\n\r\ncwt.produceUnitData = function() {\r\n  var list = [];\r\n  cwt.nTimes(50, function() {\n    return list.push(Object.create(unit));\n  });\r\n  return list;\r\n};\r\n\r\ncwt.produceUnitFactory = function(units) {\r\n  return Object.assign(Object.create(unitFactory), {\r\n    units: units\r\n  });\r\n};\r\n\r\ncwt.produceUnitHandler = function(events, units) {\r\n  return Object.assign(Object.create(unitHandler), {\r\n    events: events\r\n  });\r\n};","lastModified":1463219958259},"src_new/game/model/weather.js":{"code":"const weathertypeValidator = function(sheet) {\r\n  sheet.defaultWeather = Types.isBoolean(data.defaultWeather) ? data.defaultWeather : false;\r\n  sheet.minDuration = Require.isInteger(data.minDuration, data.id + \":minDuration\");\r\n  sheet.maxDuration = Require.isInteger(data.maxDuration, data.id + \":maxDuration\");\r\n};\r\n\r\nconst weather = {\r\n\r\n  setWeather: function setWeather(id) {\r\n    this.active = this.types.getSheet(id);\r\n    let duration = this.active.minDuration;\r\n    duration += parseInt(Math.random() * (this.active.maxDuration - duration), 10);\r\n    this.leftDays = duration;\r\n    this.events.publish(\"weather:changed:\" + id, duration);\r\n  },\r\n\r\n  decreaseLeftDays: function decreaseLeftDays() {\r\n    this.leftDays--;\r\n    if (this.leftDays == 0) {\r\n      this.setWeather(this.types.getRandom().id);\r\n    }\r\n  }\r\n};\r\n\r\ncwt.getWeathertypeValidator = function() {\r\n  return weathertypeValidator;\r\n};\r\n\r\ncwt.produceWeather = function(events) {\r\n  var weather = Object.assign(Object.create(weather), {\r\n    events: events\r\n  });\r\n\r\n  events.subscribe(\"turn:day\", function() {\n    return weather.decreaseLeftDays();\n  });\r\n\r\n  return weather;\r\n};","lastModified":1463171134353},"src_new/game/modelSerializer/mapLoader.js":{"code":"const mapLoader = {\r\n  loadMap: function loadMap(mapData) {\r\n    \r\n    this.mapChanger.setSize(map.width, map.height);\r\n    this.mapChanger.fillWithTiles(map.fill_type);\r\n\r\n    this.turn.setDay(cwt.optional(map.day).orElse(0));\r\n    this.turn.setTurnOwner(cwt.optional(map.turn_owner).orElse(0));\r\n\r\n    this.playerChanger.cleanPlayers();\r\n    if (this.typeCheck.isInteger(map.players)) {\r\n      cwt.nTimes(map.players, function(index) {\n        return this.playerChanger.activatePlayer(\"Player:\" + index, index);\n      }.bind(this));\r\n    } else {\r\n      map.players.forEach(function(data, index) {\n        return this.playerChanger.activatePlayer(\r\n          cwt.optional(data.name).orElse(\"Player:\" + index),\r\n          cwt.optional(data.team).orElse(index)\r\n        );\n      }.bind(this));\r\n    }\r\n\r\n    this.unitFactory.cleanUnits();\r\n    cwt.optional(map.units).ifPresent(function(units) {\n      return units.forEach(function(data) {\n        return this.units.createUnitAt(data.type, data.x, data.y);\n      }.bind(this));\n    }.bind(this));\r\n  }\r\n};\r\n\r\ncwt.produceMapLoader = function(events, unitFactory, mapChanger, playerChanger, turn) {\r\n  return Object.assign(Object.create(mapLoader), {\r\n    events: events,\r\n    unitFactory: unitFactory,\r\n    turn: turn,\r\n    mapChanger: mapChanger,\r\n    playerChanger: playerChanger,\r\n    types: cwt.produceTypeAsserter(),\r\n    typeCheck: cwt.produceTypeChecker(),\r\n    logger: cwt.produceLogger(\"MAPLOADER\")\r\n  });\r\n};","lastModified":1463219035731},"src_new/game/main.js":{"code":"cwt.produceGameInstance = function(loop) {\r\n  cwt.produceLoggerContext(\"GAME\");\r\n\r\n  const eventHandler = cwt.produceEventHandler();\r\n\r\n  var unitTypeDB;\r\n  var tileTypeDB;\r\n  var moveTypeDB;\r\n  var weatherTypeDB;\r\n\r\n  eventHandler.subscribe(\"game:loadtype:UNITS\", function(data) {\n    return unitTypeDB = cwt.produceSheetDB(data, function() {\n      return true;\n    });\n  });\r\n  eventHandler.subscribe(\"game:loadtype:TILES\", function(data) {\n    return tileTypeDB = cwt.produceSheetDB(data, cwt.produceTiletypeNormalizer());\n  });\r\n  eventHandler.subscribe(\"game:loadtype:MOVETYPES\", function(data) {\n    return moveTypeDB = cwt.produceSheetDB(data, function() {\n      return true;\n    });\n  });\r\n  eventHandler.subscribe(\"game:loadtype:WEATHERS\", function(data) {\n    return weatherTypeDB = cwt.produceSheetDB(data, function() {\n      return true;\n    });\n  });\r\n\r\n  eventHandler.subscribe(\"game:construct\", function() {\r\n    if (!unitTypeDB || !tileTypeDB || !moveTypeDB || !weatherTypeDB) {\r\n      cwt.raiseError(\"CannotConstructGameWithoutDataTypes\");\r\n    }\r\n\r\n    // ??? ==> OPTIONAL\r\n    const typeDB = cwt.produceTypeDB(unitTypeDB, tileTypeDB, moveTypeDB, weatherTypeDB);\r\n    const model = cwt.produceModel(eventHandler);\r\n    //         OPTIONAL <== ???\r\n\r\n    const turn = cwt.produceTurn(eventHandler, null /* players */ );\r\n    const units = cwt.produceUnitData();\r\n    const unitFactory = cwt.produceUnitFactory(units);\r\n    const unitHandler = cwt.produceUnitHandler(eventHandler, units);\r\n    const map = cwt.produceMapData();\r\n    const mapChanger = cwt.produceMapChanger(map, eventHandler, tileTypeDB);\r\n    const playerData = cwt.producePlayerData();\r\n    const playerChanger = cwt.producePlayerChanger(playerData);\r\n\r\n    const mapLoader = cwt.produceMapLoader(eventHandler, unitFactory, mapChanger, playerChanger, turn);\r\n\r\n    eventHandler.subscribe(\"client:map:load\", function(data) {\n      return mapLoader.loadMap(data);\n    });\r\n  });\r\n\r\n  const controllerMsgPush = cwt.connectMessagePusher(\"CONTROLLER\");\r\n\r\n  eventHandler.subscribe(\"*\", function(key) {\r\n    // shift model events outside\r\n    if (!key.startsWith(\"game:\")) {\r\n      controllerMsgPush(JSON.stringify([].slice.call(arguments, 0)));\r\n    }\r\n  });\r\n\r\n  const eventLog = cwt.produceLogger(\"ISOLATE-MESSAGES\");\r\n  const eventPipe = cwt.produceDataBuffer(function(data) {\r\n    eventLog.info(\"handle game event \" + cwt.stringWithLimitedLength(JSON.stringify(data), 100));\r\n    eventHandler.publish.apply(eventHandler, data);\r\n  });\r\n\r\n  cwt.connectMessageHandler(\"GAME\", function(data) {\n    return eventPipe.pushData(JSON.parse(data));\n  });\r\n\r\n  cwt.clearLoggerContext();\r\n\r\n  return cwt.produceGameloop(function() {\n    return eventPipe.evaluateData();\n  });\r\n};","lastModified":1463229383460},"src_new/controller/model/i18n.js":{"code":"var localization = Object.freeze({\r\n  resolve: function resolve(key) {\r\n    var data = this.languages[this.activeLanguage][key];\r\n    return this.types.isSomething(data) ? data : \"???\" + key + \"???\";\r\n  },\r\n  \r\n  selectLanguage: function selectLanguage(key) {\r\n    this.requires.isSomething(this.languages[key]);\r\n    this.activeLanguage = key;\r\n  }\r\n}); \r\n\r\ncwt.produceLocalizationProvider = function(languages) {\r\n  if (!tc.isMapOf(languages, partialRight(tc.isMapOf, tc.isString) )) {\r\n    cwt.raiseError(\"IAE\");\r\n  }\r\n  \r\n  // languages: this.require(languages).toBe(mapOf(mapOf(string()))\r\n  \r\n  return Object.assign(Object.create(localization), {\r\n    languages: languages,\r\n    activeLanguage: Object.keys(languages)[0],\r\n    types: cwt.produceTypeChecker(),\r\n    requires: cwt.produceTypeAsserter()\r\n  });\r\n};","lastModified":1463162914716},"src_new/controller/model/input.js":{"code":"var inputActionHandler = {\r\n\r\n  _getActionList: function _getActionList(action) {\r\n    if (!this.actions.hasOwnProperty(action)) {\r\n      this.actions[action] = [];\r\n    }\r\n    return this.actions[action];\r\n  },\r\n\r\n  isActionPressed: function isActionPressed(action) {\r\n    return this._getActionList(action).some(function(key) {\n      return this.keys[key];\n    }.bind(this));\r\n  },\r\n\r\n  demapKeyFromAction: function demapKeyFromAction(key, action) {\r\n    var keyList = this._getActionList(action);\r\n    var index = keyList.indexOf(key);\r\n    keyList.splice(index, 1);\r\n  },\r\n\r\n  mapKeyToAction: function mapKeyToAction(key, action) {\r\n    this._getActionList(action).push(key);\r\n  }\r\n};\r\n\r\nvar fakeInputActionHandler = {\r\n  isActionPressed: function isActionPressed(action) {\r\n    return false;\r\n  },\r\n\r\n  demapKeyFromAction: function demapKeyFromAction(key, action) {\r\n  },\r\n\r\n  mapKeyToAction: function mapKeyToAction(key, action) {\r\n  }\r\n};\r\n\r\nvar inputKeyHandler = {\r\n\r\n  pressKey: function pressKey(key) {\r\n    this.keys[key] = true;\r\n  },\r\n\r\n  releaseKey: function releaseKey(key) {\r\n    this.keys[key] = false;\r\n  }\r\n};\r\n\r\ncwt.produceFakeInputHandler = function() {\r\n  return fakeInputActionHandler;\r\n};\r\n\r\ncwt.produceInputHandler = function() {\r\n  var keys = {};\r\n\r\n  var actions = Object.assign(Object.create(inputActionHandler), {\r\n    actions: {},\r\n    keys: keys\r\n  });\r\n\r\n  var keys = Object.assign(Object.create(inputKeyHandler), {\r\n    keys: keys\r\n  });\r\n\r\n  actions.mapKeyToAction(\"KB_13\", \"ACTION\");\r\n\r\n  cwt.produceKeyboardBackend(keys).bind();\r\n\r\n  return actions;\r\n};","lastModified":1463179362488},"src_new/controller/model/states.js":{"code":"var state = {\r\n  enter: function enter() {},\r\n  update: function update() {},\r\n  render: function render() {},\r\n  exit: function exit() {}\r\n};\r\n\r\ncwt.produceGamestates = function(events) {\r\n  function produceState(stateImpl, name) {\n    var dependencies = (arguments[2] !== void 0 ? arguments[2] : {});\n    return Object.assign(Object.assign(Object.create(state), stateImpl), Object.assign({\r\n      log: cwt.produceLogger(name)\r\n    }, dependencies));\n  }\r\n\r\n  return {\r\n    STARTGAME: produceState(startGameState, \"STARTGAME\"),\r\n    LOADING: produceState(loadingState, \"LOADING\", {\r\n      requestData: cwt.requestResource,\r\n      generateTimer: cwt.produceTimer,\r\n      serial: cwt.executeJobs,\r\n      events: events\r\n    }),\r\n    MAINMENU: produceState(mainMenuState, \"MAINMENU\"),\r\n    LOADMAP: produceState(loadMapState, \"LOADMAP\")\r\n  };\r\n};","lastModified":1463176465399},"src_new/controller/model/storage.js":{"code":"var localForageAPI = {\r\n\r\n  getItem: function(key, cbDone, cbFail) {\r\n    localforage.getItem(key, function(err, value) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone(value);\r\n      }\r\n    });\r\n  },\r\n\r\n  setItem: function(key, value, cbDone, cbFail) {\r\n    localforage.setItem(key, value, function(err, value) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone();\r\n      }\r\n    });\r\n  },\r\n\r\n  removeItem: function(key, cbDone, cbFail) {\r\n    localforage.removeItem(key, function(err) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone();\r\n      }\r\n    });\r\n  },\r\n\r\n  clear: function(cbDone, cbFail) {\r\n    localforage.clear(function(err) {\r\n      if (err !== null) {\r\n        cbFail(err);\r\n      } else {\r\n        cbDone();\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\ncwt.producePersistentStorage = function() {\r\n  return Object.create(localForageAPI);\r\n};","lastModified":1463125279767},"src_new/controller/main.js":{"code":"cwt.produceControllerInstance = function(loop) {\r\n  cwt.produceLoggerContext(\"UI\");\r\n\r\n  const realInput = cwt.produceInputHandler();\r\n  const fakeInput = cwt.produceFakeInputHandler();\r\n\r\n  const eventHandler = cwt.produceEventHandler();\r\n\r\n  const states = cwt.produceGamestates(eventHandler);\r\n  const statemachine = cwt.produceStateMachine(eventHandler, states);\r\n\r\n  const gameMsgPush = cwt.connectMessagePusher(\"GAME\");\r\n\r\n  eventHandler.subscribe(\"*\", function(key) {\r\n    // shift controller events inside model\r\n    if (key.startsWith(\"game:\")) {\r\n      gameMsgPush(JSON.stringify([].slice.call(arguments, 0)));\r\n    }\r\n  });\r\n\r\n  const eventLog = cwt.produceLogger(\"ISOLATE-MESSAGES\");\r\n  const eventPipe = cwt.produceDataBuffer(function(data) {\r\n    eventLog.info(\"handle game event \" + JSON.stringify(data));\r\n    eventHandler.publish.apply(eventHandler, data);\r\n  });\r\n\r\n  cwt.connectMessageHandler(\"CONTROLLER\", function(data) {\n    return eventPipe.pushData(JSON.parse(data));\n  });\r\n\r\n  cwt.clearLoggerContext();\r\n\r\n  var blockInputTimer = 0;\r\n  return cwt.produceGameloop(function(delta) {\r\n    blockInputTimer -= delta;\r\n\r\n    eventPipe.evaluateData();\r\n\r\n    var nextState = statemachine.activeState.update(delta, blockInputTimer <= 0 ? realInput : fakeInput);\r\n    statemachine.activeState.render(delta);\r\n    cwt.optional(nextState).ifPresent(function(next) {\r\n      blockInputTimer = 250;\r\n      statemachine.setState(next);\r\n    });\r\n  });\r\n};","lastModified":1463229380686},"src_new/core/isolate.js":{"code":"const generatePipeKey = function(name) {\r\n  return \"_MSGH_\" + name + \"_\";\r\n};\r\n\r\ncwt.connectMessagePusher = function(pipeName) {\r\n  const pipeHandlerKey = generatePipeKey(pipeName);\r\n  return function() {\r\n    cwt[pipeHandlerKey].apply(null, arguments);\r\n  };\r\n};\r\n\r\ncwt.connectMessageHandler = function(pipeName, onMessage) {\r\n  cwt[generatePipeKey(pipeName)] = onMessage;\r\n};","lastModified":1463225022234}}