controller.mapList=[],controller.loadMaps=util.singleLazyCall(function(e,t){function o(e,t){if(e===!0)return!0;t.take();var o=r[n];controller.storage.get(o,function(e){null===e?util.grabRemoteFile({path:o,json:!0,error:function(e){controller.loadFault(e,t)},success:function(e){constants.DEBUG&&util.log("map grabbed, saving as",o),controller.storage.set(o,e,function(){n++,controller.mapList.push({name:e.name,key:o}),t.pass()})}}):(n++,controller.mapList.push({name:e.value.name,key:o}),t.pass())})}if(e)return constants.DEBUG&&util.log("break at load maps due error from previous inits"),t.pass(!0);constants.DEBUG&&util.log("loading maps"),t.take();for(var n=0,r=model.maps,i=jWorkflow.order(function(){constants.DEBUG&&util.log("start loading maps")}),l=0,a=r.length;a>l;l++)i.andThen(o);i.andThen(function(e){e===!0?(constants.DEBUG&&util.log("failed to load maps"),t.pass(!0)):(constants.DEBUG&&util.log("finished loading maps"),t.pass(!1))}).start()});