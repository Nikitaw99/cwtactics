controller.registerInvokableCommand("nextTurn"),controller.defineEvent("nextTurn"),controller.defineGameConfig("dayLimit",0,999,0),model.day=0,model.turnOwner=-1,controller.persistenceHandler(function(t){model.turnOwner=t.trOw!==void 0?t.trOw:0,model.day=t.day!==void 0?t.day:0},function(t){t.trOw=model.turnOwner,t.day=model.day}),model.isTurnOwner=function(t){return model.turnOwner===t},model.daysToTurns=function(t){return model.players.length*t},model.nextTurn=function(){var t,e,r=model.turnOwner,n=r;for(r++;r!==n;){if(r===constants.MAX_PLAYER){r=0,model.day++,model.tickTimedEvents();var o=controller.configValue("dayLimit");o>0&&model.day===o&&controller.endGameRound()}if(model.players[r].team!==constants.INACTIVE_ID)break;r++}for(r===n&&model.criticalError(constants.error.ILLEGAL_DATA,constants.error.CANNOT_FIND_NEXT_PLAYER),t=0,e=model.properties.length;e>t;t++)model.properties[t].owner===r&&(model.doPropertyGiveFunds(t),model.propertyRepairs(t),model.propertySupply(t));var i=1===controller.configValue("autoSupplyAtTurnStart");for(t=model.getFirstUnitSlotId(r),e=model.getLastUnitSlotId(r);e>t;t++)model.units[t].owner!==constants.INACTIVE_ID&&(model.drainFuel(t),i&&model.tryUnitSuppliesNeighbours(t));model.resetActableStatus(r),model.resetTurnTimer(),model.turnOwner=r,model.isClientPlayer(r)&&(model.lastActiveClientPid=r),model.updateVisiblePid(),model.recalculateFogMap(),controller.events.nextTurn(),controller.isHost()&&controller.isPlayerAiControlled(r)&&controller.localInvokement("prepareAiTurn",[])};