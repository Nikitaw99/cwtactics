controller.onEvent("damageUnit",function(e){controller.updateUnitStatus(e)}),controller.onEvent("healUnit",function(e){controller.updateUnitStatus(e)}),controller.onEvent("battleBetween",function(e,t){controller.updateSimpleTileInformation(),controller.updateUnitStatus(e),controller.updateUnitStatus(t)}),controller.onEvent("buildUnit",function(){controller.updateSimpleTileInformation()}),controller.onEvent("loadUnitInto",function(e,t){controller.updateUnitStatus(t)}),controller.onEvent("unloadUnitFrom",function(e){controller.updateUnitStatus(e)}),controller.onEvent("joinUnits",function(e,t){controller.updateUnitStatus(t)}),controller.onEvent("refillResources",function(e){"number"==typeof e.x&&(e=model.extractUnitId(e)),controller.updateUnitStatus(e)}),controller.onEvent("clearUnitPosition",function(e){var t=model.units[e],o=-t.x,n=-t.y;model.isValidPosition(o-1,n)&&model.unitPosMap[o-1][n]&&controller.updateUnitStatus(model.extractUnitId(model.unitPosMap[o-1][n])),model.isValidPosition(o+1,n)&&model.unitPosMap[o+1][n]&&controller.updateUnitStatus(model.extractUnitId(model.unitPosMap[o+1][n])),model.isValidPosition(o,n+1)&&model.unitPosMap[o][n+1]&&controller.updateUnitStatus(model.extractUnitId(model.unitPosMap[o][n+1])),model.isValidPosition(o,n-1)&&model.unitPosMap[o][n-1]&&controller.updateUnitStatus(model.extractUnitId(model.unitPosMap[o][n-1]))}),controller.onEvent("setUnitPosition",function(e){controller.updateUnitStatus(e)}),controller.onEvent("hideUnit",function(e){controller.updateUnitStatus(e)}),controller.onEvent("unhideUnit",function(e){controller.updateUnitStatus(e)});