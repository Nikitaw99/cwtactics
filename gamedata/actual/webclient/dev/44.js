controller.registerInvokableCommand("changePropertyType"),controller.registerInvokableCommand("resetCapturePoints"),controller.registerInvokableCommand("captureProperty"),controller.defineEvent("changePropertyType"),controller.defineEvent("resetCapturePoints"),controller.defineEvent("captureProperty"),controller.defineGameScriptable("captureRate",50,9999),controller.defineGameScriptable("funds",1,99999),controller.defineGameConfig("captureLimit",0,constants.MAX_PROPERTIES,0),model.unitTypeParser.addHandler(function(e){return util.expectNumber(e,"captures",!1,!0,1,10)?void 0:!1}),model.tileTypeParser.addHandler(function(e){return util.expectNumber(e,"points",!1,!0,1,100)?util.expectNumber(e,"funds",!1,!0,10,99999)?void 0:!1:!1}),model.properties=util.list(constants.MAX_PROPERTIES+1,function(){return{capturePoints:20,owner:-1,x:0,y:0,type:null}}),model.propertyPosMap=util.matrix(constants.MAX_MAP_WIDTH,constants.MAX_MAP_HEIGHT,null),controller.persistenceHandler(function(e){for(var t=0,o=model.properties.length;o>t;t++)model.properties[t].owner=constants.INACTIVE_ID;for(var t=0,o=e.prps.length;o>t;t++){var r=e.prps[t],n=!1;n||util.expectNumber(r,0,!0,!0,0,constants.MAX_PROPERTIES-1)||(n=!0),n||util.expectNumber(r,5,!0,!0,-1,constants.MAX_PLAYER-1)||(n=!0),n||util.expectNumber(r,1,!0,!0,0,constants.MAX_MAP_WIDTH-1)||(n=!0),n||util.expectNumber(r,2,!0,!0,0,constants.MAX_MAP_HEIGHT-1)||(n=!0),n||util.expectString(r,3,!0)||(n=!0),model.tileTypes[r[3]].capturePoints&&(n||util.expectNumber(r,4,!0,!0,1,model.tileTypes[r[3]].capturePoints)||(n=!0)),n&&model.criticalError(constants.error.ILLEGAL_MAP_FORMAT,constants.error.SAVEDATA_PLAYER_MISSMATCH);var l=model.properties[r[0]];l.type=model.tileTypes[r[3]],l.capturePoints=r[4],l.owner=r[5],l.x=r[1],l.y=r[2],model.propertyPosMap[r[1]][r[2]]=l}},function(e){var t;e.prps=[];for(var o=0,r=model.properties.length;r>o;o++)t=model.properties[o],t.owner!==constants.INACTIVE_ID&&e.properties.push([o,t.x,t.y,t.type.ID,t.capturePoints,t.owner])}),model.getPropertyByPos=function(e,t){return model.propertyPosMap[e][t]},model.isPropertyTile=function(e,t){return null!==model.getPropertyByPos(e,t)},model.extractPropertyId=function(e){var t=model.properties.indexOf(e);return-1===t&&model.criticalError(constants.error.ILLEGAL_PARAMETERS,constants.error.PROPERTY_NOT_FOUND),t},model.countPropertiesOfPlayer=function(e){model.isValidPlayerId(e)||model.criticalError(-1,-1);for(var t=0,o=model.properties,r=0,n=o.length;n>r;r++)o[r].owner===e&&t++;return t},model.captureProperty=function(e,t){var o=model.units[e],r=model.properties[t],n=parseInt(o.hp/10,10)+1;if(r.capturePoints-=n,0>=r.capturePoints){var l=r.x,a=r.y;if(DEBUG&&util.log("property",t,"captured by",e),model.modifyVisionAt(l,a,r.type.vision,1),r.type.looseAfterCaptured===!0){var i=r.owner;model.playerLooses(i)}var s=r.type.changeAfterCaptured;s!==void 0&&model.changePropertyType(t,s),r.capturePoints=20,r.owner=o.owner;var c=controller.configValue("captureLimit");0!==c&&model.countProperties()>=c&&controller.endGameRound()}controller.events.captureProperty(uid)},model.resetCapturePoints=function(e){model.properties[e].capturePoints=20,controller.events.resetCapturePoints(e)},model.propertyIsCapturableBy=function(e,t){return model.properties[e].type.points>0&&model.units[t].type.captures>0},model.changePropertyType=function(e,t){mode.tileTypes[t]||model.criticalError(constants.error.ILLEGAL_PARAMETERS,constants.error.UNKNOWN_OBJECT_TYPE),model.properties[e].type=t,controller.events.changedPropertyType(e,t)};