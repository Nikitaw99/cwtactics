controller.registerInvokableCommand("markUnitActable"),controller.registerInvokableCommand("markUnitNonActable"),controller.registerInvokableCommand("trapWait"),controller.registerInvokableCommand("setActableStatus"),controller.defineEvent("markUnitNonActable"),controller.defineEvent("markUnitActable"),controller.defineEvent("trapWait"),model.leftActors=util.list(constants.MAX_UNITS_PER_PLAYER,!1),controller.persistenceHandler(function(e){for(var t=0,r=model.leftActors.length;r>t;t++)model.leftActors[t]=!1;var n=e.actr;if(n)for(t=0,r=n.length;r>t;t++)model.leftActors[n[t]]=!0},function(e){for(var t=[],r=0,n=model.leftActors.length;n>r;r++)model.leftActors[r]&&t.push(r);e.actr=t}),model.canAct=function(e){var t=model.turnOwner*constants.MAX_UNITS_PER_PLAYER;return e>=t+constants.MAX_UNITS_PER_PLAYER||t>e?!1:model.leftActors[e-t]===!0},model.setActableStatus=function(e,t){var r=model.turnOwner*constants.MAX_UNITS_PER_PLAYER;e>=r+constants.MAX_UNITS_PER_PLAYER||r>e?model.criticalError(constants.error.ILLEGAL_PARAMETERS,constants.error.TURN_OWNER_ONLY):model.leftActors[e-r]=t},model.trapWait=function(e){model.setActableStatus(e,!1),controller.events.trapWait(e)},model.resetActableStatus=function(e){for(var t=model.getFirstUnitSlotId(e),r=model.getLastUnitSlotId(e),n=t;r>t;t++)model.leftActors[t-n]=model.units[t].owner===constants.INACTIVE_ID?!1:!0},model.markUnitNonActable=function(e){model.setActableStatus(e,!1);var t=controller.events.markUnitNonActable;t&&t(e)},model.markUnitActable=function(e){model.setActableStatus(e,!0);var t=controller.events.markUnitActable;t&&t(e)};