controller.registerInvokableCommand("nextAiStep"),controller.registerInvokableCommand("prepareAiTurn"),controller.activeAIs=util.list(constants.MAX_PLAYER,function(){return{memory:{},ai:null}}),controller.aiImpls={},controller.registerAI=function(t){util.expectString(t,"key",!0)&&util.expectString(controller.aiImpls,"key",!0)||model.criticalError(constants.error.ILLEGAL_PARAMETERS,constants.error.GAME_STATE_BREAK),util.expectFunction(t,"init",!0)||model.criticalError(constants.error.ILLEGAL_PARAMETERS,constants.error.GAME_STATE_BREAK),util.expectFunction(t,"tick",!0)||model.criticalError(constants.error.ILLEGAL_PARAMETERS,constants.error.GAME_STATE_BREAK),controller.aiImpls[t.name]=t},controller.setAIPlayer=function(t,e){var r=controller.aiImpls[e];return r?(controller.activeAIs[t].ai=r,!0):!1},controller.isPlayerAiControlled=function(t){return null!==controller.activeAIs[t].ai},controller.getAiForCurrentPlayer=function(){var t=controller.activeAIs[model.turnOwner];return t.ai||model.criticalError(constants.error.ILLEGAL_DATA,constants.error.AI_STEP_ON_NON_AI_PLAYER),t},model.prepareAiTurn=function(){var t=controller.getAiForCurrentPlayer();t.ai.init(t.memory,model.turnOwner),model.nextAiStep()},model.nextAiStep=function(){var t=controller.getAiForCurrentPlayer();t.ai.tick(t.memory,controller.aiActions)!==!1&&controller.localInvokement("nextAiStep",[])};